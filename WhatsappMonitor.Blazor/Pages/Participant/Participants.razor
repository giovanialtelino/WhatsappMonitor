@page "/participant"
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models;

@if(users == null || loading == true)
{
<p>Loading....</p>
}
else if(loading == false)
{
<div class="form-row">
<div class="form-group col-md-2">
                <label for="">Order By</label>
                <select class="form-control" @onchange="@OrderList">
                    <option value="name">Name</option>
                    <option value="firstMessage">First Message</option>
                    <option value="lastMessage">Last Message</option>
                    <option value="messageP">Message %</option>
                    <option value="wordP">Word %</option>
                </select>
            </div>
            <div class="form-group col-md-2">
                <label for="">Order Type</label>
                <select class="form-control" @onchange="@OrderType">
                    <option value="crescent">Crescent</option>
                    <option value="decrescente">Decrescent</option>
                </select>
            </div>
</div>
@foreach (var i in users)
{
<li class="list-group-item">
    <form>
        <div class="form-row">
            <div class="form-group col-md-6">
                <input class="form-control" type="text" @bind="i.PersonName">
            </div>
            <div class="form-group col-md-3">
                <button type="button" class="btn btn-secondary" @onclick="(() => EditPersonName(i))">Edit Name</button>
                <button type="button" class="btn btn-danger" @onclick="(() => DeletePersonName(i.FixedName))">Delete Person</button>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-2">
                <label for="">First Message</label>
                <input class="form-control" type="text" @bind="i.FirstMessage">
            </div>
             <div class="form-group col-md-2">
                <label for="">Last Message</label>
                <input class="form-control" type="text" @bind="i.LastMessage">
            </div>
            <div class="form-group col-md-2">
                <label for="">Message Counter</label>
                <input class="form-control" type="text" @bind="i.MessageCounter">
            </div>
            <div class="form-group col-md-2">
                <label for="">Word Counter</label>
                <input class="form-control" type="text" @bind="i.WordsCounter">
            </div>
            <div class="form-group col-md-2">
                <label for="">Message (%)</label>
                <input class="form-control" type="text" @bind="i.MessageCounterPercentage">
            </div>
            <div class="form-group col-md-2">
                <label for="">Words (%)</label>
                <input class="form-control" type="text" @bind="i.WordsCounterPercentage">
            </div>
        </div>
    </form>
</li>
}
}

@code {
    [Parameter]
    public int Id { get; set; }
    List<ParticipantDTO> users;

    public bool loading = true;

    string orderType = "crescent";
    string orderList = "name";
    protected override async Task OnInitializedAsync()
    {
        await GetParticipants();
    }

    public void SetLoading()
    {
        loading = true;
        StateHasChanged();
    }

    public void EndLoading()
    {
        loading = false;
        StateHasChanged();
    }

    public async Task GetParticipants()
    {
        users = await apiServices.GetParticipants(Id);
        EndLoading();
    }

    public async Task EditPersonName(ParticipantDTO dto)
    {
        SetLoading();
        await apiServices.UpdateChatPersonName(Id, dto);
        await GetParticipants();
    }

    public async Task DeletePersonName(string name)
    {
        SetLoading();
        await apiServices.DeleteChatPersonName(Id, name);
        await GetParticipants();
    }

    public void OrderList(ChangeEventArgs e)
    {
        orderList = e.Value.ToString();
        OrderUsers();
    }

    public void OrderType(ChangeEventArgs e)
    {
        orderType = e.Value.ToString();
        OrderUsers();
    }

    public void OrderUsers()
    {
        switch (orderList)
        {
            case "firstMessage":
                if (orderType == "crescent")
                {
                    users = users.OrderBy(c => c.FirstMessage).ToList();
                }
                else
                {
                    users = users.OrderByDescending(c => c.FirstMessage).ToList();
                }
                break;

            case "lastMessage":
                if (orderType == "crescent")
                {
                    users = users.OrderBy(c => c.LastMessage).ToList();
                }
                else
                {
                    users = users.OrderByDescending(c => c.LastMessage).ToList();
                }
                break;

            case "messageP":
                if (orderType == "crescent")
                {
                    users = users.OrderBy(c => c.MessageCounterPercentage).ToList();
                }
                else
                {
                    users = users.OrderByDescending(c => c.MessageCounterPercentage).ToList();
                }
                break;

            case "wordP":
                if (orderType == "crescent")
                {
                    users = users.OrderBy(c => c.WordsCounterPercentage).ToList();
                }
                else
                {
                    users = users.OrderByDescending(c => c.WordsCounterPercentage).ToList();
                }
                break;

            default:
                if (orderType == "crescent")
                {
                    users = users.OrderBy(c => c.PersonName).ToList();
                }
                else
                {
                    users = users.OrderByDescending(c => c.PersonName).ToList();
                }

                break;
        }
    }
}
