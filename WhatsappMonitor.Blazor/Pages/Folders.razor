@page "/folder"

@inject NavigationManager NavigationManager
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models

<br/>

<form>
        <div class="form-row">
 <div class="form-group col-6">
        <input class="form-control" type="text" placeholder="New Folder Name" @bind="newEntity">
    </div>
    <div class="form-group col-6">
        <button class="btn btn-primary form-control col-3" @onclick="AddUser">Add Folder</button>
    </div>
    </div>
   
</form>

<br/>

@if (entities == null || loading == true )
{
    <p><em>Loading...</em></p>
}
else
{
   <ul class="list-group">
    @foreach (var i in entities)
    {
        <li class="list-group-item">
            <form>
                <div class="form-row">
                    <div class="form-group col-6">
                        <input class="form-control" type="text" @bind="i.Name">
                    </div>
                    <div class="form-group col-6">
<button type="button" class="btn btn-secondary form-control col-3" @onclick="(() => EditUser(i.EntityId))" >Edit</button>
    <button type="button" class="btn btn-danger form-control col-3" @onclick="(() => DeleteUser(i.EntityId))">Delete</button>
    <button type="button" class="btn btn-success form-control col-3" @onclick="(() => UserInfoPage(i))">Information</button>
                    </div>
                </div>
    </form>
    
        </li>
    }
</ul>
}

@code {
    private List<Entity> entities;
    private string newEntity;
    public bool loading;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetUsers();
    }

    private async Task GetUsers()
    {
        entities = await apiServices.GetentitiesAsync();
        loading = false;
    }

    private async Task AddUser()
    {
        if (!string.IsNullOrWhiteSpace(newEntity))
        {
            loading = true;
            await apiServices.AddEntity(newEntity);
            await GetUsers();
        }
    }

    private async Task EditUser(int i)
    {
        var selectedEntity = entities.First(p => p.EntityId == i);
        if (!string.IsNullOrWhiteSpace(selectedEntity.Name))
        {
            loading=true;
            await apiServices.EditEntity(selectedEntity);
            await GetUsers();
        }
    }

    private async Task DeleteUser(int i)
    {
        await apiServices.DeleteEntityById(i);
        await GetUsers();
    }

    private void UserInfoPage(Entity entity)
    {
        NavigationManager.NavigateTo(String.Concat("/folder/", entity.EntityId));
    }
}