@page "/chatReader"
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models

@if(chats == null)
{
<p>Loading chats...</p>
}
else
{

<div class="form-row" style="justify-content: start;">
    <div class="form-group col-3">
 <input type="date" @bind="@dateJump" class="form-control col-7">
                <button type="button" class="btn btn-primary form-control col-3" @onclick="JumpDate">
                    <span class="oi oi-target" aria-hidden="true"></span>
                </button>
    </div>

    <div class="form-group col-3">
        <input type="text" class="form-control" placeholder="Search for a word"/>
    <button type="button" class="btn btn-primary form-control">Search</button>
    </div>

    <div class="form-group col-2">
    <button type="button" class="btn btn-primary form-control">First Message</button>
    </div>

    <div class="form-group col-2">
    <button type="button" class="btn btn-primary form-control">Last Message</button>
    </div>
</div>

<ChatComponent
chats = "@chats" />

}

@code {
    [Parameter]
    public int Id { get; set; }
    List<ChatMessage> chats;
    int skip = 0;
    DateTime dateJump;
    int take = 25;
    int totalPages = 0;
    int currentPage = 0;
    bool allowBack = false; //new messages
    bool allowNext = false; //older messages

    protected override async Task OnInitializedAsync()
    {
        dateJump = DateTime.Now;
        await LoadChat();
    }

    public async Task LoadChat()
    {
        var result = await apiServices.LoadChatBefore(Id, DateTime.Now());
        chats = result;
    }

    public async Task BackChat()
    {
        skip = skip - take;
        await LoadChat();
    }

    public async Task NextChat()
    {
        skip = skip + take;
        await LoadChat();
    }

    public async Task JumpDate()
    {
        skip = await apiServices.JumpChatToDate(Id, dateJump);
        await LoadChat();
    }
}