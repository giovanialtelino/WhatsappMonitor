@page "/chatReader"

@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models;

<div style="justify-content: center;" class="form-row">
    <h2>Chat Reader</h2>
</div>

@if(chats == null)
{
<p>Loading for a word.</p>
}
else
{
<ChatComponent
chats = "@chats" />

<div class="form-row">
    <div class="col-2">
        <button type="button" class="btn btn-primary" > 
            <label>&nbsp;</label>
            <span class="oi oi-caret-left" aria-hidden="true" @onclick="BackChat"></span>
            &nbsp;
        </button>
    </div>
    <div class="col-2">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary" > 
            <span class="oi oi-caret-right" aria-hidden="true" @onclick="NextChat"></span>
            
        </button>
    </div>

    <div class="col-4"    >
<label>Jump to Date</label>
<input type="date" @bind="@dateJump" class="form-control">
        </div>
           <button type="button" class="btn btn-primary" > 
            <span class="oi oi-target" aria-hidden="true" @onclick="JumpDate"></span>            
        </button>
</div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    List<Chat> chats;
    int skip = 0;
    DateTime dateJump;

     protected override async Task OnInitializedAsync()
    {
        await LoadChat();
    }

    public async Task LoadChat()
    {
        chats = await apiServices.LoadChat(Id, skip);
        skip = skip + chats.Count();
    }

    public async Task BackChat()
    {
        chats = null;
        skip = skip - 50;
                        await LoadChat();
                        
            }

    public async Task NextChat()
    {
        chats = null;
                skip = skip + 50;
await LoadChat();

    }     

    public async Task JumpDate()
    {
        chats = null;
        skip = await apiServices.JumpChatToDate(Id, dateJump);
        await LoadChat();
    }
}