@page "/chatReader"
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models
@inject IJSRuntime JSRuntime

@if(chats == null)
{
<p>Loading chats...</p>
}
else
{
    <p> @ScrollTop </p>
    <p> @MessageCount </p>
    <p> @MaxSize </p>
    
<div class="form-row" style="justify-content: start;">
    <div class="form-group col-3">
 <input type="date" @bind="@dateJump" class="form-control col-7">
                <button type="button" class="btn btn-primary form-control col-3" >
                    <span class="oi oi-target" aria-hidden="true"></span>
                </button>
    </div>

    <div class="form-group col-2">
    <button type="button" class="btn btn-primary form-control">First Message</button>
    </div>

    <div class="form-group col-2">
    <button type="button" class="btn btn-primary form-control">Last Message</button>
    </div>
</div>

<ul class="scrollable-chat-list" id="scroll-list" style="padding-left: 0px;" @onscroll="@OnScroll">
@foreach (var chat in chats)
{
<li class="list-group-item short-padding li-hoverable">
   <div class="form-row">
        <div class="col-2 no-margin-td">
           <p class="no-margin-td">@chat.PersonName</p>
       </div>
       <div class="col-2 no-margin-td">
           <p class="no-margin-td">@chat.MessageTime</p>
       </div>
       <div class="col-8 no-margin-td">
           <p class="no-margin-td">@chat.Message</p>
       </div>
   </div>
</li>
}
</ul>

}

@code {
    [Parameter]
    public int Id { get; set; }
    List<ChatMessage> chats;
    DateTime dateJump;
    public int ScrollTop { get; set; }    
    public int MessageCount {get;set; }
    public int MaxSize {get;set; }

    private async Task OnScroll(EventArgs e)
   {
      MaxSize = await MaxScrollHeight();
      ScrollTop = await GetScroll();
      MessageCount = chats.Count();

      if(ScrollTop < 200){
          await LoadChatBefore();
      }else if (ScrollTop - 200 > MaxSize) {
          await LoadChatAfter();
      }
   }

    private async Task<int> GetScroll()
    {
    return await JSRuntime.InvokeAsync<int>("getScrollToTop", "#scroll-list");
    }     

private async Task<int> MaxScrollHeight()
{
    return await JSRuntime.InvokeAsync<int>("getMaxScrollHeight", "#scroll-list");
}

    protected override async Task OnInitializedAsync()
    {
        dateJump = DateTime.Now;
        await LoadChat();
    }

    public async Task LoadChat()
    {
        var result = await apiServices.LoadChatBefore(Id, DateTime.Now);
        chats = result;
    }

    public async Task LoadChatBefore()
    {
        var lastDate = chats.Max(c => c.MessageTime);
    var result = await apiServices.LoadChatBefore(Id, lastDate )        ;

    if((result.Count() + chats.Count()) > 800){
        chats.RemoveRange(0, 200);    
    }

    chats.AddRange(result);

    }

    public async Task LoadChatAfter()
    {
var lastDate = chats.Min(c => c.MessageTime);
    var result = await apiServices.LoadChatBefore(Id, lastDate )        ;

  if((result.Count() + chats.Count()) > 800){
        chats.RemoveRange(chats.Count - 200, 200);    
    }

    chats.InsertRange(0, result);

    }
    

}