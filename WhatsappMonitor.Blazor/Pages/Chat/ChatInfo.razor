@page "/chatInfo"
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models;

<div style="justify-content: center;" class="form-row">
    <h2>Chat participants</h2>
</div>

@if(users == null)
{
<p>Loading....</p>
}
else
{
@foreach (var i in users)
{
<li class="list-group-item">
    <form>
        <div class="form-row">
            <div class="form-group col-md-6">
                <input class="form-control" type="text" @bind="i.PersonName">
            </div>
            <div class="form-group col-md-3">
                <button type="button" class="btn btn-secondary" @onclick="(() => EditPersonName(i))">Edit Name</button>
                <button type="button" class="btn btn-danger" @onclick="(() => DeletePersonName(i.FixedName))">Delete Person</button>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-2">
                <label for="">First Message</label>
                <input class="form-control" type="text" @bind="i.FirstMessage">
            </div>
            <div class="form-group col-md-2">
                <label for="">Message Counter</label>
                <input class="form-control" type="text" @bind="i.MessageCounter">
            </div>
            <div class="form-group col-md-2">
                <label for="">Word Counter</label>
                <input class="form-control" type="text" @bind="i.WordsCounter">
            </div>
            <div class="form-group col-md-2">
                <label for="">Message (%)</label>
                <input class="form-control" type="text" @bind="i.MessageCounterPercentage">
            </div>
            <div class="form-group col-md-2">
                <label for="">Words (%)</label>
                <input class="form-control" type="text" @bind="i.WordsCounterPercentage">
            </div>
        </div>
    </form>
</li>
}
}

@code {
    [Parameter]
    public int Id { get; set; }
    List<ParticipantDTO> users;

    protected override async Task OnInitializedAsync()
    {
        await GetParticipants();
    }

    public async Task GetParticipants()
    {
        users = await apiServices.GetParticipants(Id);
    }

    public async Task EditPersonName(ParticipantDTO dto)
    {
        await apiServices.UpdateChatPersonName(Id, dto);
    }

    public async Task DeletePersonName(string name)
    {
        await apiServices.DeleteChatPersonName(Id, name);
    }
}