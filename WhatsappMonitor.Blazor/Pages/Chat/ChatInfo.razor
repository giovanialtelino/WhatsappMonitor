@page "/chatInfo"
@inject Services.ApiService apiServices
@using WhatsappMonitor.Shared.Models;

<div style="justify-content: center;" class="form-row">
    <h2>General Information</h2>
</div>

@if(totalInfo == null || totalUsers == null)
{
<p>Loading....</p>
}
else
{
<div class="form-row">
    <div class="col-sm-2">
        <label>Total Messages</label>
        <input type="text" class="form-control" @bind="@totalInfo.TotalMessage">        
    </div>
    <div class="col-sm-2">
        <label>Total Words</label>
        <input type="text" class="form-control" @bind="@totalInfo.TotalWords">        
    </div>
    <div class="col-sm-4">
        <label>Messages by hour</label>
@foreach (var item in totalInfo.CommonHours)
{
<li class="list-group-item">
   <div class="form-row">
       <p>@item.Item1 - @item.Item2</p>
   </div>
</li>
}
    </div>
    <div class="col-sm-4">
        <label>Most Common Words</label>
@foreach (var item in totalInfo.CommonWords)
{
<li class="list-group-item">
   <div class="form-row">
       <p>@item.Item1 - @item.Item2</p>
   </div>
</li>
}
    </div>
</div>


<div style="justify-content: center;" class="form-row">
    <h2>User Information</h2>
</div>

foreach (var item in totalUsers)
{
    <p>@item.PersonName</p>
}

}



@code {
    [Parameter]
    public int Id { get; set; }
    TotalFolderInfoDTO totalInfo;
    List<ChatPersonInfoDTO> totalUsers;

    DateTime from;

    DateTime until;

    protected override async Task OnInitializedAsync()
    {
        await GetTotalFolderInfo();
        await GetTotalFolderUsersInfo();
    }

    public async Task GetTotalFolderInfo()
    {
        totalInfo = await apiServices.GetTotalFolderInfo(Id, from, until);
    }

    public async Task GetTotalFolderUsersInfo()
    {
        totalUsers = await apiServices.GetTotalFolderUsersInfo(Id, from, until);
    }
}