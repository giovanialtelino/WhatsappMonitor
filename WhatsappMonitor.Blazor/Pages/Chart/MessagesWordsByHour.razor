@page "/messagesWordsByHour"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using WhatsappMonitor.Shared.Models

<ChartJsBarChart @ref="_barChartJs" Config="@_config" />

@code{
    [Parameter]
    public List<MessagesTime> messagesTimes { get; set; }

    [Parameter]
    public List<WordsTime> wordsTime { get; set; }

    private BarConfig _config;
    private ChartJsBarChart _barChartJs;

    protected override void OnInitialized()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Messages and Words Percentage by Hour"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }                
            }
        };

        _config.Data.Labels.AddRange(new[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" });

        var barSet1 = new BarDataset<DoubleWrapper>
        {
            Label = "Words",
            BackgroundColor = "#690000",
            BorderWidth = 1,
            HoverBorderWidth = 2,
            BorderColor = "#ffffff"
        };

        var barSet2 = new BarDataset<DoubleWrapper>
        {
            Label = "Messages",
            BackgroundColor = "#000069",
            BorderWidth = 1,
            HoverBorderWidth = 2,
            BorderColor = "#ffffff"
        };

        var wordsSorted = wordsTime.OrderBy(c => c.Hour).Select(c => c.MessagePercentage).ToList();
        barSet1.AddRange(wordsSorted.ToList().Wrap());

        var messageSorted = messagesTimes.OrderBy(c => c.Hour).Select(c => c.MessagePercentage).ToList();
        barSet2.AddRange(messageSorted.ToList().Wrap());

        _config.Data.Datasets.Add(barSet1);
        _config.Data.Datasets.Add(barSet2);
    }
}